%FATOS
maximo(vaso1, 4).
maximo(vaso2, 3).

objetivo(2, _).
objetivo(_, 2).

/* altera(Estado1, Estado2): vasos no Estado1 sÃ£o alterados para o Estado2 */
%enche
altera([0, _], [Vn1, _]) :-
    maximo(vaso1, Vn1).

altera([_, 0], [_, Vn2]) :-
    maximo(vaso2, Vn2).

%esvazia
altera([Va1, _], [0, _]) :-
    Va1 > 0.

altera([_, Va2], [_, 0]). :-
    Va2 > 0.

%despeja
altera([Va1, Va2], [Vn1, Vn2]) :-
    
desepeja((V1, V2), (V11, V21)) :-
    V1 > V2,
    V21 is V2 +

/* Gera todos os estados possÃ­veis a partir dos estados atuais */
estende([[Va1, Va2]|Caminho], Caminhos) :-
    findall(
        [(V11, V21), (V1, V2)|Caminho],
        despeja((V1, V2), (V11, V21)),
        Caminhos).

2 litros em 4 e 3
4 = 0 e 3 = 0
enche 4 
    4 = 4 e 3 = 0 (4)
passa 4 para 3 
    4 = 1 e 3 = 3 (4)
esvazia 3 
    4 = 1 e 3 = 0 (1)
passa 4 para 3 
    4 = 0 e 3 = 1 (1)
enche 4 
    4 = 4 e 3 = 1 (5)
passa 4 para 3
    4 = 2 e 3 = 3 (5)

6 litros em 7 e 5
7 = 0 e 5 = 0
enche 7 
    7 = 7 e 5 = 0
passa 7 para 5 
    7 = 2 e 5 = 5
esvazia 5 
    7 = 2 e 5 = 0
passa 7 para 5
    7 = 0 e 5 = 2
enche 7
    7 = 7 e 5 = 2
passa 7 para 5
    7 = 4 e 5 = 5
esvazia 5 
    7 = 4 e 5 = 0
passa 7 para 5
    7 = 0 e 5 = 4
enche 7
    7 = 7 e 5 = 4
passa 7 para 5
    7 = 6 e 5 = 5

%estado(R1, R2)

%S((R1, R2), (R11, R21))

%encher totalmente r1 ou R2

%despejar r1 em r2